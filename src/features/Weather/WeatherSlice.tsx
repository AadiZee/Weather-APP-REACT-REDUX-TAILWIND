import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import axios from "axios";

export interface WeatherState {
  currentWeatherData: any;
  oneApiWeatherData: any;
  isFetching: boolean;
  fetched: boolean;
  error: boolean;
}

const initialState: WeatherState = {
  currentWeatherData: [],
  oneApiWeatherData: [],
  isFetching: false,
  fetched: false,
  error: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getWeatherData = createAsyncThunk(
  "weather/fetchWeather",
  async (search: string | number) => {
    let units = "metric";
    if (typeof search === "string") {
      const responseCord = await axios.get(
        `${process.env.REACT_APP_BASE_URL}/weather?q=${search}&appid=${process.env.REACT_APP_API_KEY}&units=${units}`
      );

      const { lon, lat } = responseCord.data.coord;

      const responseOneApi = await axios.get(
        `${process.env.REACT_APP_BASE_URL}/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}&units=${units}`
      );

      return {
        currentData: responseCord.data,
        oneApiData: responseOneApi.data,
      };
    } else if (typeof search === "number") {
      const responseCord = await axios.get(
        `${process.env.REACT_APP_BASE_URL}/weather?zip=${search}&appid=${process.env.REACT_APP_API_KEY}&units=${units}`
      );

      const { lon, lat } = responseCord.data.coord;

      const responseOneApi = await axios.get(
        `${process.env.REACT_APP_BASE_URL}/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}&units=${units}`
      );

      return {
        currentData: responseCord.data,
        oneApiData: responseOneApi.data,
      };
    }
  }
);

export const weatherSlice = createSlice({
  name: "weather",
  initialState,
  reducers: {
    addWeatherData: (state, action: PayloadAction<any>) => {
      state.currentWeatherData = [...action.payload.currentData];
      state.oneApiWeatherData = [...action.payload.oneApiData];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getWeatherData.pending, (state) => {
        state.isFetching = true;
      })
      .addCase(getWeatherData.fulfilled, (state, action) => {
        state.currentWeatherData = [action.payload?.currentData];
        state.oneApiWeatherData = [action.payload?.oneApiData];
        state.isFetching = false;
        state.fetched = true;
      })
      .addCase(getWeatherData.rejected, (state) => {
        state.isFetching = false;
        state.fetched = false;
        state.error = true;
      });
  },
});

export const { addWeatherData } = weatherSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectWeather = (state: RootState) => state.weather;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default weatherSlice.reducer;
